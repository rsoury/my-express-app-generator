{"version":3,"sources":["config/sql.js"],"names":[],"mappings":"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","file":"config/sql.js","sourcesContent":["import mysql from 'mysql';\nimport colors from 'colors';\nimport S from 'string';\nimport Redis from './redis';\n\nmodule.exports = class Database{\n    constructor(env){\n        this.POOL = mysql.createPool(env === 'development' ? this.devDB() : this.prodDB());\n        this.REDIS = new Redis();\n        this.TESTING = env === 'production' ? false : false; //false;\n    }\n    query(query, variables, callback){\n        if(typeof(variables) == 'function'){\n            callback = variables;\n            variables = '';\n        }\n        variables = variables || '';\n        const pre_query = new Date().getTime();\n        //When we are testing we are going to run both queries and compare them to see how often they return the same results.\n        //Should be 100% of the time.\n        this.REDIS.getCache(query, mysql.format(query, variables), result => {\n            if(this.TESTING ? true : result == -1){\n                this.POOL.getConnection((err, connection) => {\n                    if(err) {\n                        if (connection != undefined) {\n                            connection.release();\n                            connection.destroy();\n                        }\n                        console.log(\"code : 100, status : Error in connection database, err : \" + err);\n                        return -99;\n                    }\n                    connection.on('error', (err) => {\n                        connection.release();\n                        connection.destroy();\n                        console.log(\"code : 101, status : Error in connection database, err : \" + err);\n                        return -99;\n                    });\n                    connection.query(query, variables, (err, rows) => {\n                        connection.release();\n                        connection.destroy();\n                        if(this.TESTING){\n                            if(result != -1){\n                                const { err: RedisErr, rows: RedisRows } = result;\n                                console.log(RedisRows);\n                                console.log(rows);\n                            }else{\n                                this.REDIS.setCache({ query, formatted: mysql.format(query, variables), err, rows });\n                            }\n                        }else{\n                            this.REDIS.setCache({ query, formatted: mysql.format(query, variables), err, rows });\n                        }\n                        if(err){\n                            console.log(err);\n                        }\n                        const post_query = new Date().getTime();\n                        const duration = (post_query - pre_query) / 1000;\n                        console.log(mysql.format(query, variables).green + '   ' + (duration + '').yellow);\n                        if(callback){\n                            callback(err, rows);\n                        }\n                    });\n                });\n            }else{\n                const { err, rows } = result;\n                const post_query = new Date().getTime();\n                const duration = (post_query - pre_query) / 1000;\n                console.log(mysql.format(query, variables).red + \"    Redis: \" + (duration + '').yellow);\n                if(callback){\n                    callback(err, rows);\n                }\n            }\n        });\n    }\n    format(a, b){\n        return mysql.format(a, b);\n    }\n    devDB(){\n        return {\n            connectionLimit: 20,\n            host: \"localhost\",\n            user: \"root\",\n            password: \"sesgidvu\",\n            database: \"shompass\",\n        };\n    }\n    prodDB(){\n        return {\n            connectionLimit: 20,\n            host: \"shpmpass.com\",\n            user: \"myuser\",\n            password: \"Sesgidvu1!\",\n            database: \"shompass\",\n        };\n    }\n    log(obj){\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                console.log(key.blue);\n                console.log(obj[key]);\n            }\n        }\n    }\n};"],"sourceRoot":"/source/"}